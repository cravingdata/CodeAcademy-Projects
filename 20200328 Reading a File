# Set 1: Reading a File

with open('welcome.txt') as text_file:
  text_data = text_file.read()
  print(text_data)
  
# Set 2: Iterating through Lines

with open('how_many_lines.txt') as lines_doc:
  for lines in lines_doc.readlines():
    print(lines) 
    
with open('how_many_lines.txt') as lines_doc:
  for lines in lines_doc:
    print(lines)
# Set 3: Reading a Line

with open('just_the_first.txt') as first_line_doc:
  first_line = first_line_doc.readline()
  print(first_line)

# Set 4: Writing a File

with open('bad_bands.txt', 'w') as bad_bands_doc:
  bad_bands_doc.write("Money")
  
# Set 5: Appending to File

with open('cool_dogs.txt', 'a') as cool_dogs_file:
  cool_dogs_file.write("Air Buddy")
  print(cool_dogs_file)
  
# Set 6: What's with With?

# Indent the rest of the body
# Except for .close() to prevent from getting
# IndentError
with open('fun_file.txt') as close_this_file:
  setup = close_this_file.readline()
  punchline = close_this_file.readline()
  print(setup)
close_this_file.close()

"""The with keyword invokes something called a context manager 
for the file that we’re calling open() on. This context manager takes care 
of opening the file when we call open() and then closing the file after we leave the indented block."""

# Set 7: What is a CSV File?

with open('logger.csv') as log_csv_file:
  print(log_csv_file.read())

# Set 8: Reading a CSV File

import csv

with open('cool_csv.csv') as cool_csv_file:
  cool_csv_dict = csv.DictReader(cool_csv_file)
  for row in cool_csv_dict:
    print(row['Cool Fact'])
    
# Note that printing 'row' does not give the third field "Cool Fact", unless specified as "Cool Fact".

# Set 9: Reading Different Types of CSV Files

import csv

with open('books.csv', newline='') as books_csv:
  books_reader = csv.DictReader(books_csv, delimiter='@')
  isbn_list = []
  for books in books_reader:
    isbn_list.append(books['ISBN'])
  print(isbn_list)

books_csv.close()

# Set 10: Writing a CSV File

"""We pass the additional keyword argument newline='' 
to the file opening open() function so that we don’t accidentally 
mistake a line break in one of our data fields as a new row in our CSV"""

access_log = [{'time': '08:39:37', 'limit': 844404, 'address': '1.227.124.181'}, {'time': '13:13:35', 'limit': 543871, 'address': '198.51.139.193'}, {'time': '19:40:45', 'limit': 3021, 'address': '172.1.254.208'}, {'time': '18:57:16', 'limit': 67031769, 'address': '172.58.247.219'}, {'time': '21:17:13', 'limit': 9083, 'address': '124.144.20.113'}, {'time': '23:34:17', 'limit': 65913, 'address': '203.236.149.220'}, {'time': '13:58:05', 'limit': 1541474, 'address': '192.52.206.76'}, {'time': '10:52:00', 'limit': 11465607, 'address': '104.47.149.93'}, {'time': '14:56:12', 'limit': 109, 'address': '192.31.185.7'}, {'time': '18:56:35', 'limit': 6207, 'address': '2.228.164.197'}]
fields = ['time', 'address', 'limit']

import csv

# Taking data to save into CSV file.
with open('logger.csv', 'w') as logger_csv:
  log_writer = csv.DictWriter(logger_csv, fieldnames=fields) # Use DictWriter to note what the fieldname is.
  log_writer.writeheader() # writeheader is a method of class DictWriter, so it reads the fieldnames passed through in DictWriter.
  for item in access_log: # Iterate through all items found inside data to save inside logger.csv.
    log_writer.writerow(item)
    
# Set 11: Reading a JSON File

import json

with open('message.json') as message_json: 
  # Saving into variable means that we can interact with it. 
  message = json.load(message_json)
# json.load() creates a Python dictionary out of the file.
print(message['text'])

# Set 12: Writing a JSON File

data_payload = [
  {'interesting message': 'What is JSON? A web application\'s little pile of secrets.',
   'follow up': 'But enough talk!'}
]

# This method allows us to save Python dictionary as JSON file.

import json

with open('data.json', 'w') as data_json:
  json.dump(data_payload, data_json)

# json.dump takes two arguments: first the data object, then the file object you want to save.
