# Set 1: Instantiation

class Facade:
  pass

facade_1 = Facade()
# Instantiation happens when we retype out the Class and add ( ) to activate it. 
# This instantiation is then saved to a variable for use later. 

# Set 2: Object-Oriented Programming

class Facade:
  pass

facade_1 = Facade()

facade_1_type = type(facade_1)
print(facade_1_type)
"""A class instance is also called an object. The pattern of defining classes and creating objects to represent the responsibilities of a program is known as Object Oriented Programming or OOP.

# print(type(facade_1))
>>> "<class '__main__.Facade'>"

This shows that the object 'facade_1' is of type __main__.Facade

In Python, __main__ means 'this current file that we're running'
"""

# Set 3: Class Variables

class Grade:
  minimum_passing = 65
"""minimum_passing is the variable inside class Grade.  It is also known as the class attribute."""

# Set 4: Methods

"""The first argument in a method is always the object that is calling the method. Convention recommends that we name this first argument self. Methods always have at least this one argument."""

"""When you call a method it automatically passes the object calling the method as the first argument."""

class Rules:
  def washing_brushes(self):
    return "Point bristles towards the basin while washing your brushes."

# Set 5: Methods with Arguments

class Circle:
  pi = 3.14
  def area(self, radius):
    return self.pi * radius ** 2
  
circle = Circle()  # instantiated Circle class

pizza_area = circle.area(12/2)  # calling object and the method in class Circle, area, to find area of a pizza. Then saving it into a variable pizza_area.
teaching_table_area = circle.area(36/2)
round_room_area = circle.area(11460/2)

print(pizza_area)
print(teaching_table_area)
print(round_room_area)

# Set 6: Constructors

class Circle:
  pi = 3.14
  
  """There are several methods that we can define in a Python class that have special behavior. These methods are sometimes called “magic”, because they behave differently from regular methods. Another popular term is dunder methods, so-named because they have two underscores (double-underscore abbreviated to “dunder”) on either side of them."""

  """The first dunder method we’re going to use is the __init__ method (note the two underscores before and after the word “init”). This method is used to initialize a newly created object. It is called every time the class is instantiated."""
  
  """Methods that are used to prepare an object being instantiated are called constructors. The word “constructor” is used to describe similar features in other object-oriented programming languages but programmers who refer to a constructor in Python are usually talking about the __init__ method."""
  # Add constructor here:
  def __init__(self, diameter):
    print("New circle with diameter: ", diameter)
    
teaching_table = Circle(36)
print(teaching_table)

# Set 7: Instance Variables

class Store:
  pass

alternative_rocks = Store()
isabelles_ices = Store()

alternative_rocks.store_name = "Alternative Rocks"

isabelles_ices.store_name = "Isabelle's Ices"

"""The data held by an object is referred to as an instance variable. Instance variables aren’t shared by all instances of a class — they are variables that are specific to the object they are attached to. Also, each instance of a class can hold different kinds of data.

Alternative_rocks and isabelles_ices are objects.  The instance variable in this case is store_name."""

# Set 8: Attribute Functions

how_many_s = [{'s': False}, "sassafrass", 18, ["a", "c", "s", "d", "s"]]

for element in how_many_s:
  if hasattr(element, "count"):
    print(element)
    print(element.count("s"))
    
"""Instance variables and class variables are both accessed similarly in Python. 
This is no mistake, they are both considered attributes of an object. 
If we attempt to access an attribute that is neither a class variable nor an 
instance variable of the object Python will throw an AttributeError."""

"""What if we aren’t sure if an object has an attribute or not? getattr() 
is a Python function that works a lot like the usual dot-syntax (i.e., object_name.attribute_name) 
but we can supply a third argument that will be the default if the object 
does not have the given attribute. What if we only really care whether the attribute exists? 
hasattr() will return True if an object has a given attribute and False otherwise."""

# Set 9: Self

class Circle:
  pi = 3.14
  def __init__(self, diameter):
    # __init__ is a constructer 
    print("Creating circle with diameter {d}".format(d=diameter))

    self.radius = diameter/2
    # self.radius is an instance variable
    # found in class
    # it is a class variable
    
  def circumference(self):
    return 2 * self.pi * self.radius
  # circumference is a method under class
    
# we must instantiate the class through a variable
# and a () at the end of class name
medium_pizza = Circle(12) 
teaching_table = Circle(36)
round_room = Circle(11460)

# By instantiating the class, 
# now we can call on the method of that class
# the method called circumference
# which calls on the self
print(medium_pizza.circumference())
print(teaching_table.circumference())
print(round_room.circumference())

# Set 10: Everything is an Object

"""Attributes can be added to user-defined objects after instantiation, so it’s possible for an object to have some attributes that are not explicitly defined in an object’s constructor. We can use the dir() function to investigate an object’s attributes at runtime. dir() is short for directory and offers an organized presentation of object attributes."""

"""Python automatically adds a number of attributes to all objects that get created. These internal attributes are usually indicated by double-underscores. But sure enough, attribute is in that list."""

dir(5)

def this_function_is_an_object(self):
  return self.egg

print(dir(this_function_is_an_object))

# Functions are objects also!

"""
>>> ['__annotations__', '__call__', '__class__', '__closure__', '__code__', 
'__defaults__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', 
'__format__', '__ge__', '__get__', '__getattribute__', '__globals__', '__gt__', 
'__hash__', '__init__', '__init_subclass__', '__kwdefaults__', '__le__', '__lt__', 
'__module__', '__name__', '__ne__', '__new__', '__qualname__', '__reduce__', 
'__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__']

"""

# Set 11: String Representation

class Circle:
  pi = 3.14
  
  # __init__ is a dunder method, or 
  # constructor!
  def __init__(self, diameter):
    self.radius = diameter / 2
  
  def area(self):
    return self.pi * self.radius ** 2
  
  def circumference(self):
    return self.pi * 2 * self.radius
  
  def __repr__(self):
    return "Circle with radius " + str(self.radius)
  # The __repr__ prints out the string 
  # of the object, which is stored
  # in dunder method __repr__
  # by taking the class variable, self.radius
  # This dunder method allows you to 
  # control what is printed when user 
  # prints the initiation variable/object.
  # This is done without using dot notation.
  
  
medium_pizza = Circle(12)
teaching_table = Circle(36)
round_room = Circle(11460)

print(medium_pizza.area())

print(medium_pizza)
print(teaching_table)
print(round_room)

"""Now, we will learn another dunder method called __repr__. 
This is a method we can use to tell Python what we want the string 
representation of the class to be. __repr__ can only have one parameter, self, and must return a string."""



