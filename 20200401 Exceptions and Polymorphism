# Set 1: Inheritance

# Original class, or parent class
class Bin:
  pass

# RecyclingBin is a subclass of Bin
# It would still have the same constructor.
class RecyclingBin(Bin):
  pass

"""If the bulk of a class’s definition is useful, 
but we have a new use case that is distinct from how the original class was used, 
we can inherit from the original class. Think of inheritance as a remix — 
it sounds a lot like the original, but there’s something… different about it."""


# Set 2: Exceptions

# Define your exception up here:
class OutOfStock(Exception):
  pass

# Update the class below to raise OutOfStock
class CandleShop:
  name = "Here's a Hot Tip: Buy Drip Candles"
  def __init__(self, stock):
    self.stock = stock
    
  def buy(self, color):
    if self.stock[color] < 1:
      raise OutOfStock
    self.stock[color] = self.stock[color] - 1

candle_shop = CandleShop({'blue': 6, 'red': 2, 'green': 0})
candle_shop.buy('green')

# This should raise OutOfStock:
# candle_shop.buy('green')

# Define your exception up here:
"""An Exception is a class that inherits from Python’s Exception class."""


"""We can validate this ourselves using the issubclass() function. 
issubclass() is a Python built-in function that takes two parameters. 
issubclass() returns True if the first argument is a subclass of the second argument. 
It returns False if the first class is not a subclass of the second. issubclass() raises 
a TypeError if either argument passed in is not a class."""

# Set 3: Overriding Methods

class Message:
  def __init__(self, sender, recipient, text):
    self.sender = sender
    self.recipient = recipient
    self.text = text

class User:
  def __init__(self, username):
    self.username = username
    
  def edit_message(self, message, new_text):
    if message.sender == self.username:
      message.text = new_text
      
class Admin(User):
  def edit_message(self, message, new_text):
    message.text = new_text
    
# Set 4: Super()

class PotatoSalad:
  def __init__(self, potatoes, celery, onions):
    self.potatoes = potatoes
    self.celery = celery
    self.onions = onions

# subclass of PotatoSalad
class SpecialPotatoSalad(PotatoSalad):
  super().__init__(potatoes, celery, onions)

    
class SpecialPotatoSalad(PotatoSalad):
  def __init__(self, potatoes, celery, onions):  # retype from parent class.
    super().__init__(potatoes, celery, onions)   # add new constructor using super() and without self as the first argument.
    self.raisins = 40
    # add new variable that was not there before
    # with support of super().
    
# Set 5: Interfaces

class InsurancePolicy:
  def __init__(self, price_of_item):
    self.price_of_insured_item = price_of_item
    
class VehicleInsurance(InsurancePolicy):
  def get_rate(self):
    return self.price_of_insured_item * .001

class HomeInsurance(InsurancePolicy):
  def get_rate(self):
    return self.price_of_insured_item * .00005
    
 """When two classes have the same method names and attributes, 
 we say they implement the same interface. An interface in Python usually refers 
 to the names of the methods and the arguments they take. Other programming languages 
 have more rigid definitions of what an interface is, but it usually hinges on the fact 
 that different objects from different classes can perform the same operation 
 (even if it is implemented differently for each class)."""
 
# Set 6: Polymorphism

a_list = [1, 18, 32, 12]
a_dict = {'value': True}
a_string = "Polymorphism is cool!"

"""Polymorphism is the term used to describe the same syntax (like the + operator here, 
but it could be a method name) doing different actions depending on the type of data."""

print(len(a_list))   # >>> 4
print(len(a_dict))   # >>> 1
print(len(a_string))  # >>> 21

print(a_list + list(a_string))  # add characters to list, and make longer list.
a_dict['value'] = a_string  # set 'value' key in dictionary equal to new value in a_string
print(a_dict['value'])  # print value
print(a_dict)  # print key and value dictionary

# Set 7: Dunder Methods

class Atom:
  def __init__(self, label):
    self.label = label
  def __repr__(self):
    return str(self.label)
  def __add__(self, other):
    return Molecule([self, other])
    
class Molecule:
  def __init__(self, atoms):
    if type(atoms) is list:
	    self.atoms = atoms
  def __repr__(self):
    return str(self.atoms)
sodium = Atom("Na")
chlorine = Atom("Cl")
salt = Molecule([sodium, chlorine])
print("Original Salt: " + str(salt))
newsalt = sodium + chlorine
print("New Salt: {}{}".format(*newsalt.atoms))

# Set 8: Dunder Methods II

class LawFirm:
  def __init__(self, practice, lawyers):  # constructer method with two parameters
    self.practice = practice
    self.lawyers = lawyers
  
  def __len__(self):   # we get length of the list
    return len(self.lawyers)
  
  def __contains__(self, lawyer):  # sets up the True or False found in list
    return lawyer in self.lawyers
  
  def __repr__(self):  # sets up string to be printed in console
    return str({self.practice: len(self.lawyers)})

d_and_p = LawFirm("Injury", ["Donelli", "Paderewski"])  # object variable
print(d_and_p)  # prints >>> {'Injury': 2}
print('Donelli' in d_and_p)  # prints True from contain dunder method

