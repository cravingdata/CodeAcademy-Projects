# FoodWheel: Let the Food Choose For You

import codecademylib
from matplotlib import pyplot as plt
import pandas as pd

restaurants = pd.read_csv('restaurants.csv')

print(restaurants.head())

cuisine_options_count = restaurants.cuisine.nunique()
print(cuisine_options_count)  # print >>> 7 

cuisine_counts = restaurants.groupby('cuisine').name.count().reset_index()    # groupby cuisine, and selects name to count for number

print(cuisine_counts)  

# What cuisines does FoodWheel offer?

import codecademylib3
from matplotlib import pyplot as plt
import pandas as pd

restaurants = pd.read_csv('restaurants.csv')
print(restaurants.head())

# creating table that is grouped by cuisine, and counts the name of restaurants under each cuisine
cuisine_counts = restaurants.groupby('cuisine')\
                            .name.count()\
                            .reset_index()

cuisines = cuisine_counts.cuisine.values  # getting cuisine values from cuisine counts table 
counts = cuisine_counts.name.values
# getting name values from cuisine counts table 
print(cuisines)  # print >>> ['American' 'Chinese' 'Italian' 'Japanese' 'Korean' 'Pizza' 'Vegetarian']
print(counts)  # print >>> [10 11  8  4  3  4  4]

# .values returns a list 


plt.pie(counts,
        labels=cuisines,
       autopct='%d%%')  # percentage on pie: %.2f%% gives percentage with 2 decimal place values, while %d%% gives no place value but just rounded
plt.title('FoodWheel')
plt.axis('equal')  # to make a perfect circle; without it, it would be oval shape
plt.show()

# Orders Over Time

import codecademylib
from matplotlib import pyplot as plt
import pandas as pd

orders = pd.read_csv('orders.csv')

print orders.head()

orders['month'] = orders.date.apply(lambda x: x.split('-')[0])  # use lambda to apply split function, and takes in an argument
# set the orders dataframe with new column name equal to the applied method

print orders.head()

avg_order = orders.groupby('month').price.mean().reset_index()
# groupby month first, which was created above
# then get the average by including price then apply the mean of that price. 
# afterwards, reset the indix to create the new table
print(avg_order)
# avg_order shows mean price and months

std_order = orders.groupby('month').price.std().reset_index()
# to calculate standard deviation of price, use std() method
print(std_order)
# std_order shows price standard deviations and months

# Orders Over Time


